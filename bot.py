import asyncio
import json
import random
import ast
import aiosqlite
import os
from aiogram.filters import Command
import os
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice
import requests

# –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
try:
    from screenshot_module import take_screenshot_and_process
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    def take_screenshot_and_process(url, output_path, crop_x, crop_y, crop_size):
        print(f"‚ö†Ô∏è  –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–¥–µ–ª–∞–Ω (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞): {url}")
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
        from PIL import Image
        img = Image.new('RGB', (100, 100), color='red')
        img.save(output_path)

API_TOKEN = "8008525871:AAFpPTPQbsF661zdGXSNRsriquhiqn-VpKQ"
ADMIN_ID = 849307631
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

send_queue = asyncio.Queue()

class CaseEditState(StatesGroup):
    waiting_for_case_info = State()

class GiftEditState(StatesGroup):
    waiting_for_gift_info = State()
    waiting_for_gift_url = State()

# --- –°–ò–ù–•–†–û–ù–ù–ê–Ø –•–ï–†–ù–Ø –î–õ–Ø JS ---

def get_user_balance_sync(user_id):
    return asyncio.run(get_user_balance(user_id))


def try_open_case_sync(user_id, case_id):
    return asyncio.run(try_open_case(user_id, case_id))


def get_user_profile_data_sync(user_id):
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    return asyncio.run(get_user_profile_data(user_id))


# --- –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î ---

async def init_db():
    async with aiosqlite.connect("users.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                balance INTEGER DEFAULT 0,
                gifts TEXT DEFAULT '[]',
                avatar TEXT
            )
        """)
        await db.commit()


async def get_user(user_id):
    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT balance, gifts FROM users WHERE user_id = ?", (user_id,)) as cursor:
            return await cursor.fetchone()


async def update_user_balance_and_gifts(user_id, new_balance, new_gifts):
    async with aiosqlite.connect("users.db") as db:
        await db.execute("UPDATE users SET balance = ?, gifts = ? WHERE user_id = ?",
                         (new_balance, json.dumps(new_gifts), user_id))
        await db.commit()


async def set_user_balance(user_id, amount):
    async with aiosqlite.connect("users.db") as db:
        await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
        await db.commit()


async def get_user_balance(user_id):
    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            return row[0] if row else None


def load_cases():
    if os.path.exists("data/cases.json"):
        with open("data/cases.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_cases(cases):
    os.makedirs("data", exist_ok=True)
    with open("data/cases.json", "w", encoding="utf-8") as f:
        json.dump(cases, f, ensure_ascii=False, indent=2)

# --- –ö–û–ú–ê–ù–î–´ ---

@router.message(F.text == "/start")
async def handle_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    
    async with aiosqlite.connect("users.db") as db:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü avatar
        cursor = await db.execute("PRAGMA table_info(users)")
        columns = await cursor.fetchall()
        column_names = [column[1] for column in columns]
        
        # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ avatar –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if 'avatar' not in column_names:
            await db.execute("ALTER TABLE users ADD COLUMN avatar TEXT")
            await db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor = await db.execute("SELECT avatar FROM users WHERE user_id = ?", (user_id,))
        user_exists = await cursor.fetchone()
        
        if user_exists:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await db.execute("UPDATE users SET username = ? WHERE user_id = ?", (username, user_id))
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await db.execute("INSERT INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
        
        await db.commit()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
    avatar_path = await download_user_avatar(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –ë–î
    async with aiosqlite.connect("users.db") as db:
        await db.execute("UPDATE users SET avatar = ? WHERE user_id = ?", (avatar_path, user_id))
        await db.commit()
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(
                text="Open Web App",
                web_app=types.WebAppInfo(url='https://giftsapp.ddns.net/')
            )]
        ],
        resize_keyboard=True
    )

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∏ –º–æ–Ω–µ—Ç—ã: 0. –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ (—Å–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –º–æ–Ω–µ—Ç—ã, 1 –∫ 1).", reply_markup=keyboard)

@dp.message(F.text == "/paysupport")
async def paysupport(message: types.Message):
    await message.answer("–í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ Telegram Stars ‚Äî @support_username")
    
@dp.message(lambda m: m.text is not None and m.text.isdigit())
async def create_invoice(message: types.Message):
    amount = int(message.text)
    if amount <= 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    payment_id = f"{message.from_user.id}_{message.message_id}"
    payments[payment_id] = {
        "user_id": message.from_user.id,
        "amount": amount,
        "paid": False
    }
    await bot.send_invoice(
        chat_id=message.chat.id,
        title=f"–ü–ª–∞—Ç—ë–∂ –Ω–∞ {amount} –∑–≤—ë–∑–¥",
        description=f"–ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç –Ω–∞ —Å—É–º–º—É {amount} –∑–≤—ë–∑–¥",
        payload=payment_id,
        provider_token="",
        currency="XTR",
        prices=[LabeledPrice(label="XTR", amount=amount)],
    )

payments = {}

@dp.pre_checkout_query()
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    payment_id = pre_checkout_q.invoice_payload
    payment = payments.get(payment_id)
    if not payment or payment["paid"] or payment["amount"] != pre_checkout_q.total_amount:
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=False, error_message="–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞")
        return
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    payment_info = message.successful_payment
    payment_id = payment_info.invoice_payload
    payment = payments.get(payment_id)
    if payment and not payment["paid"]:
        payment["paid"] = True
        await add_coins(message.from_user.id, payment["amount"])
        await message.answer(
            f"–ü–ª–∞—Ç—ë–∂ {payment['amount']} –∑–≤—ë–∑–¥ –ø—Ä–∏–Ω—è—Ç. –ó–∞—á–∏—Å–ª–µ–Ω–æ {payment['amount']} –º–æ–Ω–µ—Ç."
        )
        await balance(message)

@router.message(F.text == "/get_money")
async def handle_get_money(message: Message):
    user_id = message.from_user.id
    await set_user_balance(user_id, 1000000)
    new_balance = await get_user_balance(user_id)
    await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ")

@router.message(Command("admin"))
async def handle_admin(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞–º–∏", callback_data="admin_cases")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ])
    
    await message.answer("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)

# --- –õ–û–ì–ò–ö–ê ---

@router.callback_query(F.data == "admin_close")
async def handle_admin_close(callback: CallbackQuery):
    await callback.message.delete()

@router.callback_query(F.data == "admin_cases")
async def handle_admin_cases(callback: CallbackQuery):
    cases = load_cases()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–µ–π—Å", callback_data="case_create")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤", callback_data="case_list")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(f"üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞–º–∏\n–í—Å–µ–≥–æ –∫–µ–π—Å–æ–≤: {len(cases)}", reply_markup=keyboard)

@router.callback_query(F.data == "admin_back")
async def handle_admin_back(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞–º–∏", callback_data="admin_cases")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ])
    
    await callback.message.edit_text("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)
    
@router.callback_query(F.data == "case_list")
async def handle_case_list(callback: CallbackQuery):
    cases = load_cases()
    
    if not cases:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–µ–π—Å", callback_data="case_create")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cases")]
        ])
        await callback.message.edit_text("üì¶ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤", reply_markup=keyboard)
        return
    
    buttons = []
    for case in cases:
        buttons.append([InlineKeyboardButton(
            text=f"{case['name']} ({len(case['gifts'])} –ø–æ–¥–∞—Ä–∫–æ–≤)",
            callback_data=f"case_edit_{case['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–µ–π—Å", callback_data="case_create")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cases")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("case_edit_"))
async def handle_case_edit(callback: CallbackQuery):
    case_id = callback.data.split("_")[2]
    cases = load_cases()
    case = next((c for c in cases if c["id"] == case_id), None)
    
    if not case:
        await callback.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"case_info_{case_id}")],
        [InlineKeyboardButton(text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏", callback_data=f"case_gifts_{case_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å", callback_data=f"case_delete_{case_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="case_list")]
    ])
    
    await callback.message.edit_text(
        f"üì¶ –ö–µ–π—Å: {case['name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {case['price']}‚ÇΩ\n"
        f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: {len(case['gifts'])}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {case.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("case_info_"))
async def handle_case_info(callback: CallbackQuery, state: FSMContext):
    case_id = callback.data.split("_")[2]
    cases = load_cases()
    case = next((c for c in cases if c["id"] == case_id), None)
    
    if not case:
        await callback.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await state.set_state(CaseEditState.waiting_for_case_info)
    await state.update_data(case_id=case_id)
    
    await callback.message.edit_text(
        f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞: {case['name']}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>–ù–∞–∑–≤–∞–Ω–∏–µ\n–¶–µ–Ω–∞\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è</code>\n\n"
        f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {case['name']}\n"
        f"–¶–µ–Ω–∞: {case['price']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {case.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
    )

@router.message(CaseEditState.waiting_for_case_info)
async def handle_case_info_input(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        case_id = data['case_id']
        
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        lines = message.text.split('\n')
        if len(lines) < 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –ù–∞–∑–≤–∞–Ω–∏–µ\\n–¶–µ–Ω–∞\\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
            return
        
        name = lines[0].strip()
        price = int(lines[1].strip())
        category = lines[2].strip()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ–π—Å
        cases = load_cases()
        case = next((c for c in cases if c["id"] == case_id), None)
        
        if case:
            case['name'] = name
            case['price'] = price
            case['category'] = category
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–µ–π—Å–∞ (—Å–∞–º—ã–π —Ä–µ–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫)
            await update_case_icon(case)
            
            save_cases(cases)
            
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        else:
            await message.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await state.clear()
    
async def update_case_icon(case):
    if not case['gifts']:
        return
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —Ä–µ–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫
    rarest_gift = min(case['gifts'], key=lambda x: x['chance'])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–∫–æ–Ω–∫—É –ø–æ–¥–∞—Ä–∫–∞
    if rarest_gift.get('img'):
        case['logo'] = rarest_gift['img']
        print(f"‚úÖ –ò–∫–æ–Ω–∫–∞ –∫–µ–π—Å–∞ {case['id']} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {rarest_gift['img']}")

@router.callback_query(F.data.startswith("case_gifts_"))
async def handle_case_gifts(callback: CallbackQuery):
    case_id = callback.data.split("_")[2]
    cases = load_cases()
    case = next((c for c in cases if c["id"] == case_id), None)
    
    if not case:
        await callback.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    buttons = []
    for gift in case["gifts"]:
        buttons.append([InlineKeyboardButton(
            text=f"{gift['name']} ({gift['chance']*100}%)",
            callback_data=f"gift_edit_{case_id}_{gift['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data=f"gift_add_{case_id}")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"case_edit_{case_id}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(f"üéÅ –ü–æ–¥–∞—Ä–∫–∏ –≤ –∫–µ–π—Å–µ {case['name']}:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("case_delete_"))
async def handle_case_delete(callback: CallbackQuery):
    case_id = callback.data.split("_")[2]
    cases = load_cases()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"case_confirm_delete_{case_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"case_edit_{case_id}")]
    ])
    
    await callback.message.edit_text("‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–µ–π—Å?", reply_markup=keyboard)

@router.callback_query(F.data.startswith("case_confirm_delete_"))
async def handle_case_confirm_delete(callback: CallbackQuery):
    case_id = callback.data.split("_")[3]
    cases = load_cases()
    
    # –£–¥–∞–ª—è–µ–º –∫–µ–π—Å
    cases = [c for c in cases if c["id"] != case_id]
    save_cases(cases)
    
    await callback.answer("‚úÖ –ö–µ–π—Å —É–¥–∞–ª–µ–Ω")
    await handle_case_list(callback)

@router.callback_query(F.data == "case_create")
async def handle_case_create(callback: CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–µ–π—Å —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    cases = load_cases()
    
    new_case = {
        "id": f"case-{len(cases) + 1}",
        "category": "basic",
        "name": f"–ù–æ–≤—ã–π –∫–µ–π—Å {len(cases) + 1}",
        "price": 100,
        "logo": "/media/default.png",
        "gifts": []
    }
    
    cases.append(new_case)
    save_cases(cases)
    
    await callback.answer("‚úÖ –ù–æ–≤—ã–π –∫–µ–π—Å —Å–æ–∑–¥–∞–Ω")
    await handle_case_edit(callback)
    
@router.callback_query(F.data.startswith("gift_add_"))
async def handle_gift_add(callback: CallbackQuery):
    case_id = callback.data.split("_")[2]
    cases = load_cases()
    case = next((c for c in cases if c["id"] == case_id), None)
    
    if not case:
        await callback.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
    new_gift = {
        "id": f"gift-{len(case['gifts']) + 1}-{random.randint(1000, 9999)}",  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        "name": "–ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫",
        "link": "https://example.com/gift",
        "img": "/media/gift.png",
        "chance": 0.1
    }
    
    case["gifts"].append(new_gift)
    save_cases(cases)
    
    await callback.answer("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω")
    await handle_case_gifts(callback)

@router.callback_query(F.data.startswith("gift_edit_"))
async def handle_gift_edit(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split("_")
    case_id = data_parts[2]
    gift_id = data_parts[3]
    
    cases = load_cases()
    case = next((c for c in cases if c["id"] == case_id), None)
    
    if not case:
        await callback.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    gift = next((g for g in case["gifts"] if g["id"] == gift_id), None)
    
    if not gift:
        await callback.answer("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await state.set_state(GiftEditState.waiting_for_gift_info)
    await state.update_data(case_id=case_id, gift_id=gift_id)
    
    await callback.message.edit_text(
        f"üéÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞: {gift['name']}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>–ù–∞–∑–≤–∞–Ω–∏–µ\n–®–∞–Ω—Å (0.0-1.0)</code>\n\n"
        f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {gift['name']}\n"
        f"–®–∞–Ω—Å: {gift['chance']}\n"
        f"–°—Å—ã–ª–∫–∞: {gift.get('link', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"
    )

@router.message(GiftEditState.waiting_for_gift_info)
async def handle_gift_info_input(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        case_id = data['case_id']
        gift_id = data['gift_id']
        
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        lines = message.text.split('\n')
        if len(lines) < 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –ù–∞–∑–≤–∞–Ω–∏–µ\\n–®–∞–Ω—Å")
            return
        
        name = lines[0].strip()
        chance = float(lines[1].strip())
        
        if not 0 <= chance <= 1:
            await message.answer("‚ùå –®–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(gift_name=name, gift_chance=chance)
        await state.set_state(GiftEditState.waiting_for_gift_url)
        
        await message.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ "
            "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é)"
        )
            
    except ValueError:
        await message.answer("‚ùå –®–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.3)")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()

@router.message(GiftEditState.waiting_for_gift_url)
async def handle_gift_url_input(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        case_id = data['case_id']
        gift_id = data['gift_id']
        name = data['gift_name']
        chance = data['gift_chance']
        
        new_url = message.text.strip() if message.text.strip().lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
        cases = load_cases()
        case = next((c for c in cases if c["id"] == case_id), None)
        
        if case:
            gift = next((g for g in case["gifts"] if g["id"] == gift_id), None)
            
            if gift:
                gift['name'] = name
                gift['chance'] = chance
                
                if new_url:
                    gift['link'] = new_url
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
                    await create_gift_icon(gift)
                
                save_cases(cases)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–µ–π—Å–∞
                await update_case_icon(case)
                save_cases(cases)
                
                await message.answer("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                await message.answer("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await message.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await state.clear()

async def try_open_case(user_id, case_id):
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ–π—Å–æ–≤
    with open("data/cases.json", "r", encoding="utf-8") as f:
        cases = json.load(f)

    case = next((c for c in cases if c["id"] == case_id), None)
    if not case:
        return {"error": "–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    price = case["price"]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–¥–∞—Ä–∫–æ–≤
    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT balance, gifts FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if not row:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            balance, gifts_raw = row
            if balance < price:
                return {"error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –Ω—É–∂–Ω–æ {price - balance}‚ÇΩ"}

        # –í—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞
        rnd = random.random()
        cumulative = 0
        selected_gift = None
        for gift in case["gifts"]:
            cumulative += gift["chance"]
            if rnd <= cumulative:
                selected_gift = gift
                break

        if not selected_gift:
            selected_gift = case["gifts"][-1]

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
        new_balance = balance - price
        # —á–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫
        gifts_list = json.loads(gifts_raw) if gifts_raw else []
        gifts_list.append(selected_gift["id"])
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        await db.execute(
            "UPDATE users SET balance = ?, gifts = ? WHERE user_id = ?",
            (new_balance, json.dumps(gifts_list), user_id)
        )


        send_win_notification_to_admin_sync(user_id, selected_gift, case_id)


        # –û—Ç–¥–∞—ë–º –ø–æ–¥–∞—Ä–æ–∫
        return {
            "gift": {
                "id": selected_gift["id"],
                "name": selected_gift.get("name", ""),
                "img": selected_gift.get("img", ""),
                "link": selected_gift.get("link", "")
            }
        }

async def create_gift_icon(gift):
    if gift.get('link'):
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∫–æ–Ω–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤
            os.makedirs("media/gifts", exist_ok=True)
            output_path = f"media/gifts/{gift['id']}.png"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            await asyncio.to_thread(
                take_screenshot_and_process,
                gift['link'], 
                output_path,
                crop_x=527,
                crop_y=120,
                crop_size=255
            )
            
            gift['img'] = f"/{output_path}"
            print(f"‚úÖ –ò–∫–æ–Ω–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ {gift['id']} —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ {gift['id']}: {e}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–∫–æ–Ω–∫—É

@router.message(GiftEditState.waiting_for_gift_url)
async def handle_gift_url_input(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        case_id = data['case_id']
        gift_id = data['gift_id']
        name = data['gift_name']
        chance = data['gift_chance']
        
        new_url = message.text.strip() if message.text.strip().lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
        cases = load_cases()
        case = next((c for c in cases if c["id"] == case_id), None)
        
        if case:
            gift = next((g for g in case["gifts"] if g["id"] == gift_id), None)
            
            if gift:
                gift['name'] = name
                gift['chance'] = chance
                
                if new_url:
                    gift['link'] = new_url
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ —Ñ–æ–Ω–µ
                    asyncio.create_task(create_gift_icon_with_notification(gift, case, message.chat.id))
                    await message.answer("‚è≥ –°–æ–∑–¥–∞—é –∏–∫–æ–Ω–∫—É –∏–∑ —Å—Å—ã–ª–∫–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")
                else:
                    await message.answer("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω (—Å—Å—ã–ª–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞)!")
                
                save_cases(cases)
                
            else:
                await message.answer("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await message.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await state.clear()

async def create_gift_icon_with_notification(gift, case, chat_id):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    try:
        await create_gift_icon(gift)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–µ–π—Å–∞
        await update_case_icon(case)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        cases = load_cases()
        current_case = next((c for c in cases if c["id"] == case["id"]), None)
        if current_case:
            current_case['gifts'] = [g if g['id'] != gift['id'] else gift for g in current_case['gifts']]
            save_cases(cases)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.send_message(chat_id, f"‚úÖ –ò–∫–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ '{gift['name']}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏: {e}"
        print(error_msg)
        await bot.send_message(chat_id, error_msg)

# --- –û–ß–ï–†–ï–î–¨ ---

async def send_plus_prompt(user_id):
    await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—á–∏—Å–ª–æ):")


async def queue_watcher():
    while True:
        user_id = await send_queue.get()
        print("queue_watcher: –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ", user_id)
        await send_plus_prompt(user_id)


# --- –ü–†–û–ß–ï–ï ---

async def download_user_avatar(user_id):
    photos = await bot.get_user_profile_photos(user_id, limit=1)
    if photos.total_count > 0:
        file_id = photos.photos[0][0].file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        destination_folder = "profile_picture"
        os.makedirs(destination_folder, exist_ok=True)
        destination_path = os.path.join(destination_folder, f"{user_id}.png")
        await bot.download_file(file_path, destination_path)
        return destination_path
    return None

async def get_user_avatar(user_id):
    photos = await bot.get_user_profile_photos(user_id, limit=1)
    if photos.total_count > 0:
        file_id = photos.photos[0][0].file_id
        file = await bot.get_file(file_id)
        return f"https://api.telegram.org/file/bot{API_TOKEN}/{file.file_path}"
    return None

async def get_user_profile_data(user_id):
    async with aiosqlite.connect("users.db") as db:
        async with db.execute(
            "SELECT username, balance, gifts, avatar FROM users WHERE user_id = ?",
            (user_id,)
        ) as cursor:
            row = await cursor.fetchone()
            if not row:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            username, balance, gifts_json, avatar_path = row

            gifts_ids = json.loads(gifts_json) if gifts_json else []

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏
    with open("data/cases.json", "r", encoding="utf-8") as f:
        cases = json.load(f)

    gift_info = {gift["id"]: gift for case in cases for gift in case["gifts"]}

    user_gifts = [gift_info[gid] for gid in gifts_ids if gid in gift_info]

    avatar_file = f"/{avatar_path}" if avatar_path and os.path.isfile(avatar_path) else None

    return {
        "username": username,
        "balance": balance,
        "avatar": avatar_file,
        "gifts": user_gifts
    }


def send_win_notification_to_admin_sync(user_id, gift, case_id):
    message_text = (
        f"üéâ –ö—Ç–æ-—Ç–æ –≤—ã–∏–≥—Ä–∞–ª –ø—Ä–∏–∑!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üéÅ –ü—Ä–∏–∑: {gift['name']}\n"
        f"üì¶ –ö–µ–π—Å ID: {case_id}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!"
    )

    url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage"
    resp = requests.post(url, json={
        "chat_id": ADMIN_ID,
        "text": message_text
    })

    print(resp.json())
        
@router.callback_query(F.data.startswith("done_"))
async def handle_done_button(callback: types.CallbackQuery):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
        data_parts = callback.data.split('_')
        if len(data_parts) >= 3:
            user_id = int(data_parts[1])
            gift_id = data_parts[2]
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
            await callback.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await callback.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", show_alert=False)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ': {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=False)

# --- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ---

async def main():
    dp.include_router(router)
    await init_db()
    asyncio.create_task(queue_watcher())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
