import random
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from db import *
from cases import *
from api import *
from utils import send_queue, payments
from utils import take_screenshot_and_process
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

router = Router()

class CaseEditState(StatesGroup):
    waiting_for_case_info = State()

class GiftEditState(StatesGroup):
    waiting_for_gift_info = State()
    waiting_for_gift_url = State()


# --- –ö–û–ú–ê–ù–î–´ ---

@router.message(F.text == "/start")
async def handle_start(message: Message):
    user_id = message.from_user.id
    
    await create_user(user_id)
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(
                text="Open Web App",
                web_app=types.WebAppInfo(url=f'https://{os.getenv("DOMAIN")}:8080/')
            )]
        ],
        resize_keyboard=True
    )

    await message.answer("üéÅ –ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –∏–≥—Ä–µ!", reply_markup=keyboard)

@router.message(F.text == "/paysupport")
async def paysupport(message: types.Message):
    await message.answer("–í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ Telegram Stars ‚Äî @support_username")


@router.message(F.web_app_data)
async def handle_webapp_data(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞—Ç–∏—Ç—å')
    

@router.message(lambda m: m.text is not None and m.text.isdigit())
async def create_invoice(message: types.Message):
    amount = int(message.text)
    if amount <= 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    payment_id = f"{message.from_user.id}_{message.message_id}"
    payments[payment_id] = {
        "user_id": message.from_user.id,
        "amount": amount,
        "paid": False
    }
    await message.bot.send_invoice(
        chat_id=message.chat.id,
        title=f"–ü–ª–∞—Ç—ë–∂ –Ω–∞ {amount} –∑–≤—ë–∑–¥",
        description=f"–ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç –Ω–∞ —Å—É–º–º—É {amount} –∑–≤—ë–∑–¥",
        payload=payment_id,
        provider_token="",
        currency="XTR",
        prices=[LabeledPrice(label="XTR", amount=amount)],
    )

@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    payment_id = pre_checkout_q.invoice_payload
    payment = payments.get(payment_id)
    if not payment or payment["paid"] or payment["amount"] != pre_checkout_q.total_amount:
        await pre_checkout_q.bot.answer_pre_checkout_query(pre_checkout_q.id, ok=False, error_message="–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞")
        return
    await pre_checkout_q.bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@router.message(F.successful_payment)
async def successful_payment(message: types.Message):
    payment_info = message.successful_payment
    payment_id = payment_info.invoice_payload
    payment = payments.get(payment_id)
    if payment and not payment["paid"]:
        payment["paid"] = True
        await set_user_balance(message.from_user.id, payment["amount"])
        await message.answer(
            f"–ü–ª–∞—Ç—ë–∂ {payment['amount']} –∑–≤—ë–∑–¥ –ø—Ä–∏–Ω—è—Ç. –ó–∞—á–∏—Å–ª–µ–Ω–æ {payment['amount']} –º–æ–Ω–µ—Ç."
        )
        new_balance = await get_user_balance(message.from_user.id)
        await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç.")

@router.message(F.text == "/get_money")
async def handle_get_money(message: Message):
    user_id = message.from_user.id
    await set_user_balance(user_id, 1000000)
    new_balance = await get_user_balance(user_id)
    await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ")


# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–µ–π—Å–æ–≤ ---
@router.message(Command("admin"))
async def handle_admin(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞–º–∏", callback_data="admin_cases")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ])
    await message.answer("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)

@router.callback_query(F.data == "admin_close")
async def handle_admin_close(callback: CallbackQuery):
    await callback.message.delete()

@router.callback_query(F.data == "admin_cases")
async def handle_admin_cases(callback: CallbackQuery):
    cases = load_cases()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–µ–π—Å", callback_data="case_create")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤", callback_data="case_list")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    await callback.message.edit_text(f"üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞–º–∏\n–í—Å–µ–≥–æ –∫–µ–π—Å–æ–≤: {len(cases)}", reply_markup=keyboard)

@router.callback_query(F.data == "admin_back")
async def handle_admin_back(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞–º–∏", callback_data="admin_cases")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ])
    await callback.message.edit_text("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)

@router.callback_query(F.data == "case_list")
async def handle_case_list(callback: CallbackQuery):
    cases = load_cases()
    if not cases:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–µ–π—Å", callback_data="case_create")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cases")]
        ])
        await callback.message.edit_text("üì¶ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤", reply_markup=keyboard)
        return
    buttons = []
    for case in cases:
        buttons.append([InlineKeyboardButton(
            text=f"{case['name']} ({len(case['gifts'])} –ø–æ–¥–∞—Ä–∫–æ–≤)",
            callback_data=f"case_edit_{case['id']}"
        )])
    buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–µ–π—Å", callback_data="case_create")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_cases")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("case_edit_"))
async def handle_case_edit(callback: CallbackQuery):
    case_id = callback.data.split("_")[2]
    cases = load_cases()
    case = next((c for c in cases if c["id"] == case_id), None)
    if not case:
        await callback.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"case_info_{case_id}")],
        [InlineKeyboardButton(text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏", callback_data=f"case_gifts_{case_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å", callback_data=f"case_delete_{case_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="case_list")]
    ])
    await callback.message.edit_text(
        f"üì¶ –ö–µ–π—Å: {case['name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {case['price']}‚ÇΩ\n"
        f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: {len(case['gifts'])}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {case.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("case_info_"))
async def handle_case_info(callback: CallbackQuery, state: FSMContext):
    case_id = callback.data.split("_")[2]
    cases = load_cases()
    case = next((c for c in cases if c["id"] == case_id), None)
    if not case:
        await callback.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await state.set_state(CaseEditState.waiting_for_case_info)
    await state.update_data(case_id=case_id)
    await callback.message.edit_text(
        f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞: {case['name']}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>–ù–∞–∑–≤–∞–Ω–∏–µ\n–¶–µ–Ω–∞\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è</code>\n\n"
        f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {case['name']}\n"
        f"–¶–µ–Ω–∞: {case['price']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {case.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
    )

@router.message(CaseEditState.waiting_for_case_info)
async def handle_case_info_input(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        case_id = data['case_id']
        lines = message.text.split('\n')
        if len(lines) < 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –ù–∞–∑–≤–∞–Ω–∏–µ\\n–¶–µ–Ω–∞\\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
            return
        name = lines[0].strip()
        price = int(lines[1].strip())
        category = lines[2].strip()
        cases = load_cases()
        case = next((c for c in cases if c["id"] == case_id), None)
        if case:
            case['name'] = name
            case['price'] = price
            case['category'] = category
            await update_case_icon(case)
            save_cases(cases)
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        else:
            await message.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()

@router.callback_query(F.data.startswith("case_gifts_"))
async def handle_case_gifts(callback: CallbackQuery):
    case_id = callback.data.split("_")[2]
    cases = load_cases()
    case = next((c for c in cases if c["id"] == case_id), None)
    if not case:
        await callback.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    buttons = []
    for gift in case["gifts"]:
        buttons.append([InlineKeyboardButton(
            text=f"{gift['name']} ({gift['chance']*100}%)",
            callback_data=f"gift_edit_{case_id}_{gift['id']}"
        )])
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data=f"gift_add_{case_id}")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"case_edit_{case_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(f"üéÅ –ü–æ–¥–∞—Ä–∫–∏ –≤ –∫–µ–π—Å–µ {case['name']}:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("case_delete_"))
async def handle_case_delete(callback: CallbackQuery):
    case_id = callback.data.split("_")[2]
    cases = load_cases()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"case_confirm_delete_{case_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"case_edit_{case_id}")]
    ])
    await callback.message.edit_text("‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–µ–π—Å?", reply_markup=keyboard)

@router.callback_query(F.data.startswith("case_confirm_delete_"))
async def handle_case_confirm_delete(callback: CallbackQuery):
    case_id = callback.data.split("_")[3]
    cases = load_cases()
    cases = [c for c in cases if c["id"] != case_id]
    save_cases(cases)
    await callback.answer("‚úÖ –ö–µ–π—Å —É–¥–∞–ª–µ–Ω")
    await handle_case_list(callback)

@router.callback_query(F.data == "case_create")
async def handle_case_create(callback: CallbackQuery):
    cases = load_cases()
    new_case = {
        "id": f"case-{len(cases) + 1}",
        "category": "basic",
        "name": f"–ù–æ–≤—ã–π –∫–µ–π—Å {len(cases) + 1}",
        "price": 100,
        "logo": "/media/default.png",
        "gifts": []
    }
    cases.append(new_case)
    save_cases(cases)
    await callback.answer("‚úÖ –ù–æ–≤—ã–π –∫–µ–π—Å —Å–æ–∑–¥–∞–Ω")
    await handle_case_edit(callback)

# --- –ì–∏—Ñ—Ç—ã ---

@router.callback_query(F.data.startswith("gift_add_"))
async def handle_gift_add(callback: CallbackQuery):
    case_id = callback.data.split("_")[2]
    cases = load_cases()
    case = next((c for c in cases if c["id"] == case_id), None)
    if not case:
        await callback.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    new_gift = {
        "id": f"gift-{len(case['gifts']) + 1}-{random.randint(1000, 9999)}",
        "name": "–ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫",
        "link": "https://example.com/gift",
        "img": "/media/gift.png",
        "chance": 0.1,
        "fake_chance": 0.1,
        "price": 100
    }
    case["gifts"].append(new_gift)
    save_cases(cases)
    await callback.answer("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω")
    await handle_case_gifts(callback)


@router.callback_query(F.data.startswith("gift_edit_"))
async def handle_gift_edit(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split("_")
    case_id = data_parts[2]
    gift_id = data_parts[3]
    cases = load_cases()
    case = next((c for c in cases if c["id"] == case_id), None)
    if not case:
        await callback.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    gift = next((g for g in case["gifts"] if g["id"] == gift_id), None)
    if not gift:
        await callback.answer("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await state.set_state(GiftEditState.waiting_for_gift_info)
    await state.update_data(case_id=case_id, gift_id=gift_id)
    await callback.message.edit_text(
        f"üéÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞: {gift['name']}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>–ù–∞–∑–≤–∞–Ω–∏–µ\n–®–∞–Ω—Å (0.0-1.0)\n–§–µ–π–∫–æ–≤—ã–π —à–∞–Ω—Å (0.0-1.0)\n–¶–µ–Ω–∞ (—á–∏—Å–ª–æ)</code>\n\n"
        f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {gift['name']}\n"
        f"–®–∞–Ω—Å: {gift['chance']}\n"
        f"–§–µ–π–∫–æ–≤—ã–π —à–∞–Ω—Å: {gift.get('fake_chance', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–¶–µ–Ω–∞: {gift.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–°—Å—ã–ª–∫–∞: {gift.get('link', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"
    )


@router.message(GiftEditState.waiting_for_gift_info)
async def handle_gift_info_input(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        case_id = data['case_id']
        gift_id = data['gift_id']
        lines = message.text.split('\n')

        if len(lines) < 4:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –ù–∞–∑–≤–∞–Ω–∏–µ\n–®–∞–Ω—Å\n–§–µ–π–∫–æ–≤—ã–π —à–∞–Ω—Å\n–¶–µ–Ω–∞")
            return

        name = lines[0].strip()

        # –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–Ω—Å
        chance = float(lines[1].strip())
        if not 0 <= chance <= 1:
            await message.answer("‚ùå –®–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1")
            return

        # —Ñ–µ–π–∫–æ–≤—ã–π —à–∞–Ω—Å
        fake_chance = float(lines[2].strip())
        if not 0 <= fake_chance <= 1:
            await message.answer("‚ùå –§–µ–π–∫–æ–≤—ã–π —à–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1")
            return

        # —Ü–µ–Ω–∞
        try:
            price = int(lines[3].strip())
            if price < 0:
                await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
                return
        except ValueError:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
            return

        await state.update_data(
            gift_name=name,
            gift_chance=chance,
            gift_fake_chance=fake_chance,
            gift_price=price
        )
        await state.set_state(GiftEditState.waiting_for_gift_url)

        await message.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"–®–∞–Ω—Å: {chance}\n"
            f"–§–µ–π–∫–æ–≤—ã–π —à–∞–Ω—Å: {fake_chance}\n"
            f"–¶–µ–Ω–∞: {price}\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ "
            "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é)"
        )
    except ValueError:
        await message.answer("‚ùå –®–∞–Ω—Å, —Ñ–µ–π–∫–æ–≤—ã–π —à–∞–Ω—Å –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.3, 0.7 –∏ 150)")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()


@router.message(GiftEditState.waiting_for_gift_url)
async def handle_gift_url_input(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        case_id = data['case_id']
        gift_id = data['gift_id']
        name = data['gift_name']
        chance = data['gift_chance']
        new_url = message.text.strip() if message.text.strip().lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
        cases = load_cases()
        case = next((c for c in cases if c["id"] == case_id), None)
        if case:
            gift = next((g for g in case["gifts"] if g["id"] == gift_id), None)
            if gift:
                gift['name'] = name
                gift['chance'] = chance
                if new_url:
                    gift['link'] = new_url
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ —Ñ–æ–Ω–µ
                    asyncio.create_task(create_gift_icon_with_notification(message.bot, gift, case, message.chat.id))
                    await message.answer("‚è≥ –°–æ–∑–¥–∞—é –∏–∫–æ–Ω–∫—É –∏–∑ —Å—Å—ã–ª–∫–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")
                else:
                    await message.answer("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω (—Å—Å—ã–ª–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞)!")
                save_cases(cases)
            else:
                await message.answer("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await message.answer("‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()

async def create_gift_icon_with_notification(bot: Bot, gift, case, chat_id):
    try:
        await create_gift_icon(gift, take_screenshot_and_process)
        await update_case_icon(case)
        cases = load_cases()
        current_case = next((c for c in cases if c["id"] == case["id"]), None)
        if current_case:
            current_case['gifts'] = [g if g['id'] != gift['id'] else gift for g in current_case['gifts']]
            save_cases(cases)
        await bot.send_message(chat_id, f"‚úÖ –ò–∫–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ '{gift['name']}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏: {e}"
        print(error_msg)
        await bot.send_message(chat_id, error_msg)


# --- –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ" —É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ ---
@router.callback_query(F.data.startswith("done_"))
async def handle_done_button(callback: types.CallbackQuery):
    try:
        data_parts = callback.data.split('_')
        if len(data_parts) >= 3:
            user_id = int(data_parts[1])
            gift_id = data_parts[2]
            await callback.message.delete()
            await callback.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", show_alert=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ': {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=False)
