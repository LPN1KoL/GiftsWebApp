import requests
import aiohttp
import base64
from io import BytesIO
from PIL import Image
from dotenv import load_dotenv
import os
import asyncio

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

def send_notification_to_admin_sync(user_id: int, data):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        get_chat_url = f"https://api.telegram.org/bot{API_TOKEN}/getChat"
        response = requests.post(get_chat_url, json={"chat_id": user_id}, timeout=10)
        response.raise_for_status()
        
        info = response.json()
        if info.get('ok'):
            username = info['result'].get('username')
            user_mention = f"@{username}" if username else str(user_id)
        else:
            user_mention = str(user_id)
            
    except requests.RequestException:
        user_mention = str(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"üéâ –ö—Ç–æ-—Ç–æ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_mention}\n"
        f"üéÅ –ü—Ä–∏–∑: {data['name']}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        send_message_url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage"
        requests.post(send_message_url, json={
            "chat_id": ADMIN_ID,
            "text": message_text
        }, timeout=10)
    except requests.RequestException:
        print("Failed to send notification to admin")
        pass

async def send_notification_to_admin(user_id: int, data):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    """
    await asyncio.to_thread(send_notification_to_admin_sync, user_id, data)


def take_screenshot_and_process(url, output_path, crop_x, crop_y, crop_size):
    print(f"‚ö†Ô∏è  –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–¥–µ–ª–∞–Ω (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞): {url}")
    try:
        from PIL import Image
        img = Image.new('RGB', (100, 100), color='red')
        img.save(output_path)
    except Exception:
        pass


async def get_user_avatar_base64(user_id: int, size: int = 256) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ base64.
    –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64 —á–µ—Ä–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞.
    –í—Å—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        size: –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö (–∫–≤–∞–¥—Ä–∞—Ç)

    Returns:
        Base64 —Å—Ç—Ä–æ–∫–∞ —Å data URL (data:image/jpeg;base64,...)
    """
    try:
        print(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id: {user_id}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é aiohttp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
        async with aiohttp.ClientSession() as session:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user_profile_url = f"https://api.telegram.org/bot{API_TOKEN}/getUserProfilePhotos?user_id={user_id}&limit=1"
                async with session.get(user_profile_url) as profile_response:
                    if profile_response.status == 200:
                        profile_data = await profile_response.json()
                        if profile_data.get('ok') and profile_data['result']['total_count'] > 0:
                            file_id = profile_data['result']['photos'][0][0]['file_id']

                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                            file_info_url = f"https://api.telegram.org/bot{API_TOKEN}/getFile?file_id={file_id}"
                            async with session.get(file_info_url) as file_response:
                                if file_response.status == 200:
                                    file_data = await file_response.json()
                                    if file_data.get('ok'):
                                        file_path = file_data['result']['file_path']
                                        file_download_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"

                                        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                        async with session.get(file_download_url) as download_response:
                                            if download_response.status == 200:
                                                image_data = await download_response.read()
                                                base64_data = base64.b64encode(image_data).decode('utf-8')
                                                return f"data:image/jpeg;base64,{base64_data}"
            except Exception as alt_error:
                print(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ failed: {alt_error}")

        print("–°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç...")
        # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
        with BytesIO() as buffer:
            black_image = Image.new('RGB', (size, size), color='black')
            black_image.save(buffer, format='JPEG', quality=95)
            base64_data = base64.b64encode(buffer.getvalue()).decode('utf-8')
            print(f"–°–æ–∑–¥–∞–Ω —á–µ—Ä–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç, base64 –¥–ª–∏–Ω–∞: {len(base64_data)}")
            return f"data:image/jpeg;base64,{base64_data}"

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()

        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
        with BytesIO() as buffer:
            black_image = Image.new('RGB', (size, size), color='black')
            black_image.save(buffer, format='JPEG', quality=95)
            base64_data = base64.b64encode(buffer.getvalue()).decode('utf-8')
            return f"data:image/jpeg;base64,{base64_data}"


def check_subscription_sync(user_id: int, channel_id: int):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ boolean —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    try:
        get_member_url = f"https://api.telegram.org/bot{API_TOKEN}/getChatMember"
        response = requests.post(
            get_member_url,
            json={
                "chat_id": channel_id,
                "user_id": user_id
            },
            timeout=10
        )
        response.raise_for_status()
        
        member_info = response.json()
        if member_info.get('ok'):
            status = member_info['result']['status']
            return status != 'left' and status != 'kicked'
        
        return False
        
    except:
        return False

async def check_subscription(user_id: int, channel_id: int):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    """
    return await asyncio.to_thread(check_subscription_sync, user_id, channel_id)